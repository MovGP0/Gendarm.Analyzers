<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
            
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="AssemblyVersionMismatch_Title" xml:space="preserve">
        <value>Assembly version mismatch</value>
    </data>
    <data name="AssemblyVersionMismatch_Message" xml:space="preserve">
        <value>Assembly version '{0}' does not match other version attributes</value>
    </data>
    <data name="AssemblyVersionMismatch_Description" xml:space="preserve">
        <value>All assembly version attributes should be consistent.</value>
    </data>
    <data name="AvoidCallingProblematicMethods_Title" xml:space="preserve">
        <value>Avoid problematic methods</value>
    </data>
    <data name="AvoidCallingProblematicMethods_Message" xml:space="preserve">
        <value>Method '{0}' is considered problematic.</value>
    </data>
    <data name="AvoidCallingProblematicMethods_Description" xml:space="preserve">
        <value>Avoid using methods that are known to be problematic due to potential issues such as performance problems or incorrect behavior.</value>
    </data>
    <data name="AvoidVisibleConstantField_Title" xml:space="preserve">
        <value>Avoid visible constant field</value>
    </data>
    <data name="AvoidVisibleConstantField_Message" xml:space="preserve">
        <value>The constant field '{0}' is visible outside the assembly</value>
    </data>
    <data name="AvoidVisibleConstantField_Description" xml:space="preserve">
        <value>Avoid constant fields which are visible outside the current assembly. Use 'static readonly' instead.</value>
    </data>
    <data name="CheckNewExceptionWithoutThrowing_Title" xml:space="preserve">
        <value>Exception object created but not thrown or used</value>
    </data>
    <data name="CheckNewExceptionWithoutThrowing_Message" xml:space="preserve">
        <value>The exception '{0}' is created but not thrown, not returned, and not passed to another method</value>
    </data>
    <data name="CheckNewExceptionWithoutThrowing_Description" xml:space="preserve">
        <value>Exception objects should be thrown, returned, or passed to another method as an argument.</value>
    </data>
    <data name="CheckNewThreadWithoutStart_Message" xml:space="preserve">
        <value>The thread '{0}' is created but not started, not returned, and not passed to another method</value>
    </data>
    <data name="CheckNewThreadWithoutStart_Title" xml:space="preserve">
        <value>Thread object created but not started or used</value>
    </data>
    <data name="CheckNewThreadWithoutStart_Description" xml:space="preserve">
        <value>Thread objects should be started, returned, or passed to another method as an argument.</value>
    </data>
    <data name="CloneMethodShouldNotReturnNull_Title" xml:space="preserve">
        <value>Clone method should not return null</value>
    </data>
    <data name="CloneMethodShouldNotReturnNull_Message" xml:space="preserve">
        <value>The Clone method returns null</value>
    </data>
    <data name="CloneMethodShouldNotReturnNull_Description" xml:space="preserve">
        <value>Clone methods should not return null. They should return a new object instance.</value>
    </data>
    <data name="ConstructorShouldNotCallVirtualMethods_Title" xml:space="preserve">
        <value>Constructor should not call virtual methods</value>
    </data>
    <data name="ConstructorShouldNotCallVirtualMethods_Message" xml:space="preserve">
        <value>The constructor calls the virtual method '{0}'</value>
    </data>
    <data name="ConstructorShouldNotCallVirtualMethods_Description" xml:space="preserve">
        <value>Constructors of non-sealed types should not call virtual methods. This can lead to fragile code if the method is overridden in a derived class.</value>
    </data>
    <data name="DisableDebuggingCode_Title" xml:space="preserve">
        <value>Disable debugging code in non-console applications</value>
    </data>
    <data name="DisableDebuggingCode_Message" xml:space="preserve">
        <value>The method '{0}' contains a call to Console.WriteLine</value>
    </data>
    <data name="DisableDebuggingCode_Description" xml:space="preserve">
        <value>Non-console applications should not contain calls to Console.WriteLine. Use Debug.WriteLine or Conditional(\"DEBUG\") instead.</value>
    </data>
    <data name="DoNotForgetNotImplementedMethods_Message" xml:space="preserve">
        <value>The method '{0}' throws a NotImplementedException</value>
    </data>
    <data name="DoNotForgetNotImplementedMethods_Title" xml:space="preserve">
        <value>Do not forget NotImplemented methods</value>
    </data>
    <data name="DoNotForgetNotImplementedMethods_Description" xml:space="preserve">
        <value>Methods throwing NotImplementedException should be implemented before release.</value>
    </data>
    <data name="DoNotUseEnumIsAssignableFrom_Message" xml:space="preserve">
        <value>Replace 'typeof(Enum).IsAssignableFrom({0})' with '{0}.IsEnum'</value>
    </data>
    <data name="DoNotUseEnumIsAssignableFrom_Title" xml:space="preserve">
        <value>Use type.IsEnum instead of typeof(Enum).IsAssignableFrom(type)</value>
    </data>
    <data name="DoNotUseEnumIsAssignableFrom_Description" xml:space="preserve">
        <value>Calls to typeof(Enum).IsAssignableFrom(type) can be simplified to type.IsEnum.</value>
    </data>
    <data name="EqualsShouldHandleNullArg_Title" xml:space="preserve">
        <value>Equals method should handle null argument</value>
    </data>
    <data name="EqualsShouldHandleNullArg_Message" xml:space="preserve">
        <value>Equals method does not handle null argument</value>
    </data>
    <data name="EqualsShouldHandleNullArg_Description" xml:space="preserve">
        <value>Equals(object) methods should return false when the object parameter is null.</value>
    </data>
    <data name="GetEntryAssemblyMayReturnNull_Title" xml:space="preserve">
        <value>Assembly.GetEntryAssembly may return null</value>
    </data>
    <data name="GetEntryAssemblyMayReturnNull_Message" xml:space="preserve">
        <value>Assembly.GetEntryAssembly may return null when called from a library or DLL</value>
    </data>
    <data name="GetEntryAssemblyMayReturnNull_Description" xml:space="preserve">
        <value>Calls to Assembly.GetEntryAssembly() may return null in libraries or DLLs. Ensure proper null handling.</value>
    </data>
    <data name="ObsoleteMessagesShouldNotBeEmpty_Title" xml:space="preserve">
        <value>Obsolete attribute should not be empty</value>
    </data>
    <data name="ObsoleteMessagesShouldNotBeEmpty_Message" xml:space="preserve">
        <value>The Obsolete attribute on '{0}' should include a message providing guidance.</value>
    </data>
    <data name="ObsoleteMessagesShouldNotBeEmpty_Description" xml:space="preserve">
        <value>The Obsolete attribute is more helpful if it includes advice on how to deal with the situation (e.g., the new recommended API to use).</value>
    </data>
    <data name="OnlyUseDisposeForIDisposableTypes_Title" xml:space="preserve">
        <value>Methods named Dispose should be reserved for types that implement IDisposable</value>
    </data>
    <data name="OnlyUseDisposeForIDisposableTypes_Message" xml:space="preserve">
        <value>The method '{0}' is named Dispose but the containing type does not implement IDisposable</value>
    </data>
    <data name="OnlyUseDisposeForIDisposableTypes_Description" xml:space="preserve">
        <value>Methods named Dispose should be reserved for types that implement IDisposable to avoid confusing developers.</value>
    </data>
    <data name="PreferEmptyInstanceOverNull_Title" xml:space="preserve">
        <value>Prefer returning an empty instance over null</value>
    </data>
    <data name="PreferEmptyInstanceOverNull_Message" xml:space="preserve">
        <value>The method or property '{0}' returns null; consider returning an empty instance instead</value>
    </data>
    <data name="PreferEmptyInstanceOverNull_Description" xml:space="preserve">
        <value>Methods and properties which return a string, an array, a collection, or an enumerable should return an empty instance rather than null.</value>
    </data>
    <data name="PreferSafeHandle_Title" xml:space="preserve">
        <value>Prefer SafeHandle over IntPtr or UIntPtr for unmanaged resources</value>
    </data>
    <data name="PreferSafeHandle_Message" xml:space="preserve">
        <value>Consider using SafeHandle instead of {0} for better resource management and safety</value>
    </data>
    <data name="PreferSafeHandle_Description" xml:space="preserve">
        <value>It is recommended to use SafeHandle instead of IntPtr or UIntPtr for handling unmanaged resources.</value>
    </data>
    <data name="ReplaceIncompleteOddnessCheck_Title" xml:space="preserve">
        <value>Replace incomplete oddness check</value>
    </data>
    <data name="ReplaceIncompleteOddnessCheck_Message" xml:space="preserve">
        <value>The modulo operation used to check oddness may fail for negative numbers; consider using '(x % 2 != 0)' or '(x &amp; 1 == 1)'</value>
    </data>
    <data name="ReplaceIncompleteOddnessCheck_Description" xml:space="preserve">
        <value>Using '(x % 2) == 1' to check for odd numbers will fail for negative numbers. Use '(x % 2 != 0)' or '(x &amp; 1 == 1)' instead.</value>
    </data>
    <data name="ToStringShouldNotReturnNull_Title" xml:space="preserve">
        <value>ToString() should not return null</value>
    </data>
    <data name="ToStringShouldNotReturnNull_Message" xml:space="preserve">
        <value>The ToString() method returns null; consider returning a descriptive string or string.Empty</value>
    </data>
    <data name="ToStringShouldNotReturnNull_Description" xml:space="preserve">
        <value>Overridden ToString() methods should not return null. An appropriately descriptive string, or string.Empty, should be returned instead to make the value more useful.</value>
    </data>
    <data name="AssemblyVersionMismatch_HelpLink" xml:space="preserve">
        <value>https://www.mono-project.com/docs/tools+libraries/tools/gendarme/rules/bad-practice/#avoidassemblyversionmismatchrule</value>
    </data>
</root>