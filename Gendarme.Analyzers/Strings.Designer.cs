//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gendarme.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Gendarme.Analyzers.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All assembly version attributes should be consistent..
        /// </summary>
        internal static string AssemblyVersionMismatch_Description {
            get {
                return ResourceManager.GetString("AssemblyVersionMismatch_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.mono-project.com/docs/tools+libraries/tools/gendarme/rules/bad-practice/#avoidassemblyversionmismatchrule.
        /// </summary>
        internal static string AssemblyVersionMismatch_HelpLink {
            get {
                return ResourceManager.GetString("AssemblyVersionMismatch_HelpLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly version &apos;{0}&apos; does not match other version attributes.
        /// </summary>
        internal static string AssemblyVersionMismatch_Message {
            get {
                return ResourceManager.GetString("AssemblyVersionMismatch_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly version mismatch.
        /// </summary>
        internal static string AssemblyVersionMismatch_Title {
            get {
                return ResourceManager.GetString("AssemblyVersionMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks attributes with certain types (Version, Guid, Uri) and validates the string value..
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectly_Description {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectly_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String literal in attribute does not parse correctly: &apos;{0}&apos;.
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectly_Message {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectly_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute string literals should parse correctly.
        /// </summary>
        internal static string AttributeStringLiteralsShouldParseCorrectly_Title {
            get {
                return ResourceManager.GetString("AttributeStringLiteralsShouldParseCorrectly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using methods that are known to be problematic due to potential issues such as performance problems or incorrect behavior..
        /// </summary>
        internal static string AvoidCallingProblematicMethods_Description {
            get {
                return ResourceManager.GetString("AvoidCallingProblematicMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; is considered problematic..
        /// </summary>
        internal static string AvoidCallingProblematicMethods_Message {
            get {
                return ResourceManager.GetString("AvoidCallingProblematicMethods_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid problematic methods.
        /// </summary>
        internal static string AvoidCallingProblematicMethods_Title {
            get {
                return ResourceManager.GetString("AvoidCallingProblematicMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for types that contain only static members and fires if the type contains a visible instance constructor..
        /// </summary>
        internal static string AvoidConstructorsInStaticTypes_Description {
            get {
                return ResourceManager.GetString("AvoidConstructorsInStaticTypes_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static type &apos;{0}&apos; contains a constructor.
        /// </summary>
        internal static string AvoidConstructorsInStaticTypes_Message {
            get {
                return ResourceManager.GetString("AvoidConstructorsInStaticTypes_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid constructors in static types.
        /// </summary>
        internal static string AvoidConstructorsInStaticTypes_Title {
            get {
                return ResourceManager.GetString("AvoidConstructorsInStaticTypes_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In general floating point numbers cannot be usefully compared using the equality and inequality operators..
        /// </summary>
        internal static string AvoidFloatingPointEquality_Description {
            get {
                return ResourceManager.GetString("AvoidFloatingPointEquality_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating point comparison with equality operator may cause unexpected results.
        /// </summary>
        internal static string AvoidFloatingPointEquality_Message {
            get {
                return ResourceManager.GetString("AvoidFloatingPointEquality_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid floating point equality comparison.
        /// </summary>
        internal static string AvoidFloatingPointEquality_Title {
            get {
                return ResourceManager.GetString("AvoidFloatingPointEquality_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid constant fields which are visible outside the current assembly. Use &apos;static readonly&apos; instead..
        /// </summary>
        internal static string AvoidVisibleConstantField_Description {
            get {
                return ResourceManager.GetString("AvoidVisibleConstantField_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constant field &apos;{0}&apos; is visible outside the assembly.
        /// </summary>
        internal static string AvoidVisibleConstantField_Message {
            get {
                return ResourceManager.GetString("AvoidVisibleConstantField_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid visible constant field.
        /// </summary>
        internal static string AvoidVisibleConstantField_Title {
            get {
                return ResourceManager.GetString("AvoidVisibleConstantField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for methods that may be infinitely recursive..
        /// </summary>
        internal static string BadRecursiveInvocation_Description {
            get {
                return ResourceManager.GetString("BadRecursiveInvocation_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; recursively calls itself.
        /// </summary>
        internal static string BadRecursiveInvocation_Message {
            get {
                return ResourceManager.GetString("BadRecursiveInvocation_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid bad recursive invocation.
        /// </summary>
        internal static string BadRecursiveInvocation_Title {
            get {
                return ResourceManager.GetString("BadRecursiveInvocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for methods that call Equals with a null actual parameter..
        /// </summary>
        internal static string CallingEqualsWithNullArg_Description {
            get {
                return ResourceManager.GetString("CallingEqualsWithNullArg_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; calls Equals with a null argument.
        /// </summary>
        internal static string CallingEqualsWithNullArg_Message {
            get {
                return ResourceManager.GetString("CallingEqualsWithNullArg_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid calling Equals with null argument.
        /// </summary>
        internal static string CallingEqualsWithNullArg_Title {
            get {
                return ResourceManager.GetString("CallingEqualsWithNullArg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception objects should be thrown, returned, or passed to another method as an argument..
        /// </summary>
        internal static string CheckNewExceptionWithoutThrowing_Description {
            get {
                return ResourceManager.GetString("CheckNewExceptionWithoutThrowing_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exception &apos;{0}&apos; is created but not thrown, not returned, and not passed to another method.
        /// </summary>
        internal static string CheckNewExceptionWithoutThrowing_Message {
            get {
                return ResourceManager.GetString("CheckNewExceptionWithoutThrowing_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception object created but not thrown or used.
        /// </summary>
        internal static string CheckNewExceptionWithoutThrowing_Title {
            get {
                return ResourceManager.GetString("CheckNewExceptionWithoutThrowing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread objects should be started, returned, or passed to another method as an argument..
        /// </summary>
        internal static string CheckNewThreadWithoutStart_Description {
            get {
                return ResourceManager.GetString("CheckNewThreadWithoutStart_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The thread &apos;{0}&apos; is created but not started, not returned, and not passed to another method.
        /// </summary>
        internal static string CheckNewThreadWithoutStart_Message {
            get {
                return ResourceManager.GetString("CheckNewThreadWithoutStart_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thread object created but not started or used.
        /// </summary>
        internal static string CheckNewThreadWithoutStart_Title {
            get {
                return ResourceManager.GetString("CheckNewThreadWithoutStart_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks if all nullable parameters of visible methods are compared with null before they get used..
        /// </summary>
        internal static string CheckParametersNullityInVisibleMethods_Description {
            get {
                return ResourceManager.GetString("CheckParametersNullityInVisibleMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not checked for null.
        /// </summary>
        internal static string CheckParametersNullityInVisibleMethods_Message {
            get {
                return ResourceManager.GetString("CheckParametersNullityInVisibleMethods_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check nullable parameters for null before use.
        /// </summary>
        internal static string CheckParametersNullityInVisibleMethods_Title {
            get {
                return ResourceManager.GetString("CheckParametersNullityInVisibleMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clone methods should not return null. They should return a new object instance..
        /// </summary>
        internal static string CloneMethodShouldNotReturnNull_Description {
            get {
                return ResourceManager.GetString("CloneMethodShouldNotReturnNull_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Clone method returns null.
        /// </summary>
        internal static string CloneMethodShouldNotReturnNull_Message {
            get {
                return ResourceManager.GetString("CloneMethodShouldNotReturnNull_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clone method should not return null.
        /// </summary>
        internal static string CloneMethodShouldNotReturnNull_Title {
            get {
                return ResourceManager.GetString("CloneMethodShouldNotReturnNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructors of non-sealed types should not call virtual methods. This can lead to fragile code if the method is overridden in a derived class..
        /// </summary>
        internal static string ConstructorShouldNotCallVirtualMethods_Description {
            get {
                return ResourceManager.GetString("ConstructorShouldNotCallVirtualMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor calls the virtual method &apos;{0}&apos;.
        /// </summary>
        internal static string ConstructorShouldNotCallVirtualMethods_Message {
            get {
                return ResourceManager.GetString("ConstructorShouldNotCallVirtualMethods_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor should not call virtual methods.
        /// </summary>
        internal static string ConstructorShouldNotCallVirtualMethods_Title {
            get {
                return ResourceManager.GetString("ConstructorShouldNotCallVirtualMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-console applications should not contain calls to Console.WriteLine. Use Debug.WriteLine or Conditional(\&quot;DEBUG\&quot;) instead..
        /// </summary>
        internal static string DisableDebuggingCode_Description {
            get {
                return ResourceManager.GetString("DisableDebuggingCode_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; contains a call to Console.WriteLine.
        /// </summary>
        internal static string DisableDebuggingCode_Message {
            get {
                return ResourceManager.GetString("DisableDebuggingCode_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable debugging code in non-console applications.
        /// </summary>
        internal static string DisableDebuggingCode_Title {
            get {
                return ResourceManager.GetString("DisableDebuggingCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The rule inspects all fields for disposable types and checks that the type’s Dispose method calls Dispose on all disposable fields..
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposed_Description {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposed_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; is not disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposed_Message {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposed_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disposable fields should be disposed.
        /// </summary>
        internal static string DisposableFieldsShouldBeDisposed_Title {
            get {
                return ResourceManager.GetString("DisposableFieldsShouldBeDisposed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As defined in IEEE 754 it’s impossible to compare any floating-point value, even another NaN, with NaN..
        /// </summary>
        internal static string DoNotCompareWithNaN_Description {
            get {
                return ResourceManager.GetString("DoNotCompareWithNaN_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison with NaN always returns false.
        /// </summary>
        internal static string DoNotCompareWithNaN_Message {
            get {
                return ResourceManager.GetString("DoNotCompareWithNaN_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not compare with NaN.
        /// </summary>
        internal static string DoNotCompareWithNaN_Title {
            get {
                return ResourceManager.GetString("DoNotCompareWithNaN_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods throwing NotImplementedException should be implemented before release..
        /// </summary>
        internal static string DoNotForgetNotImplementedMethods_Description {
            get {
                return ResourceManager.GetString("DoNotForgetNotImplementedMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; throws a NotImplementedException.
        /// </summary>
        internal static string DoNotForgetNotImplementedMethods_Message {
            get {
                return ResourceManager.GetString("DoNotForgetNotImplementedMethods_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not forget NotImplemented methods.
        /// </summary>
        internal static string DoNotForgetNotImplementedMethods_Title {
            get {
                return ResourceManager.GetString("DoNotForgetNotImplementedMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;lock (this)&apos; or &apos;lock (typeof(...))&apos; can cause deadlocks. Use a private lock object instead..
        /// </summary>
        internal static string DoNotLockOnThisOrTypesAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoNotLockOnThisOrTypesAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on &apos;this&apos; or &apos;Type&apos; to avoid deadlocks.
        /// </summary>
        internal static string DoNotLockOnThisOrTypesAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoNotLockOnThisOrTypesAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on &apos;this&apos; or &apos;Type&apos;.
        /// </summary>
        internal static string DoNotLockOnThisOrTypesAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoNotLockOnThisOrTypesAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locking on objects with weak identity (e.g., strings, exceptions) can cause deadlocks. Use a private lock object instead..
        /// </summary>
        internal static string DoNotLockOnWeakIdentityObjectsAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoNotLockOnWeakIdentityObjectsAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity to avoid deadlocks.
        /// </summary>
        internal static string DoNotLockOnWeakIdentityObjectsAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoNotLockOnWeakIdentityObjectsAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not lock on objects with weak identity.
        /// </summary>
        internal static string DoNotLockOnWeakIdentityObjectsAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoNotLockOnWeakIdentityObjectsAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An equality operator (==) orinequality operator (!=) method is calling itself recursively..
        /// </summary>
        internal static string DoNotRecurseInEquality_Description {
            get {
                return ResourceManager.GetString("DoNotRecurseInEquality_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equality operator calls itself recursively.
        /// </summary>
        internal static string DoNotRecurseInEquality_Message {
            get {
                return ResourceManager.GetString("DoNotRecurseInEquality_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not recurse in equality operator.
        /// </summary>
        internal static string DoNotRecurseInEquality_Title {
            get {
                return ResourceManager.GetString("DoNotRecurseInEquality_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for attempts to call Round, Ceiling, Floor or Truncate on an integral type..
        /// </summary>
        internal static string DoNotRoundIntegers_Description {
            get {
                return ResourceManager.GetString("DoNotRoundIntegers_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rounding operation on an integer is redundant.
        /// </summary>
        internal static string DoNotRoundIntegers_Message {
            get {
                return ResourceManager.GetString("DoNotRoundIntegers_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not round integers.
        /// </summary>
        internal static string DoNotRoundIntegers_Title {
            get {
                return ResourceManager.GetString("DoNotRoundIntegers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calls to typeof(Enum).IsAssignableFrom(type) can be simplified to type.IsEnum..
        /// </summary>
        internal static string DoNotUseEnumIsAssignableFrom_Description {
            get {
                return ResourceManager.GetString("DoNotUseEnumIsAssignableFrom_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace &apos;typeof(Enum).IsAssignableFrom({0})&apos; with &apos;{0}.IsEnum&apos;.
        /// </summary>
        internal static string DoNotUseEnumIsAssignableFrom_Message {
            get {
                return ResourceManager.GetString("DoNotUseEnumIsAssignableFrom_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use type.IsEnum instead of typeof(Enum).IsAssignableFrom(type).
        /// </summary>
        internal static string DoNotUseEnumIsAssignableFrom_Title {
            get {
                return ResourceManager.GetString("DoNotUseEnumIsAssignableFrom_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using Monitor.Enter without Monitor.Exit in the same method can lead to deadlocks and is difficult to maintain..
        /// </summary>
        internal static string DoNotUseLockedRegionOutsideMethodAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoNotUseLockedRegionOutsideMethodAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Monitor.Enter without corresponding Monitor.Exit in the same method.
        /// </summary>
        internal static string DoNotUseLockedRegionOutsideMethodAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoNotUseLockedRegionOutsideMethodAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use locked region outside method.
        /// </summary>
        internal static string DoNotUseLockedRegionOutsideMethodAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoNotUseLockedRegionOutsideMethodAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using MethodImplOptions.Synchronized causes a lock(this) or lock(typeof(...)) which can cause deadlocks. Use a private lock object instead..
        /// </summary>
        internal static string DoNotUseMethodImplOptionsSynchronizedAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoNotUseMethodImplOptionsSynchronizedAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use MethodImplOptions.Synchronized on method &apos;{0}&apos;.
        /// </summary>
        internal static string DoNotUseMethodImplOptionsSynchronizedAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoNotUseMethodImplOptionsSynchronizedAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use MethodImplOptions.Synchronized.
        /// </summary>
        internal static string DoNotUseMethodImplOptionsSynchronizedAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoNotUseMethodImplOptionsSynchronizedAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ThreadStatic attribute can only be applied to static fields. Applying it to instance fields is ineffective..
        /// </summary>
        internal static string DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field &apos;{0}&apos; is an instance field with the ThreadStatic attribute, which is ineffective.
        /// </summary>
        internal static string DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ThreadStatic attribute with instance fields.
        /// </summary>
        internal static string DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoNotUseThreadStaticWithInstanceFieldsAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Double-check locking can be problematic in older versions of .NET. Ensure it is used correctly..
        /// </summary>
        internal static string DoubleCheckLockingAnalyzer_Description {
            get {
                return ResourceManager.GetString("DoubleCheckLockingAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid double-check locking on &apos;{0}&apos;.
        /// </summary>
        internal static string DoubleCheckLockingAnalyzer_Message {
            get {
                return ResourceManager.GetString("DoubleCheckLockingAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid double-check locking.
        /// </summary>
        internal static string DoubleCheckLockingAnalyzer_Title {
            get {
                return ResourceManager.GetString("DoubleCheckLockingAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks that disposable locals are always disposed of before the method returns..
        /// </summary>
        internal static string EnsureLocalDisposal_Description {
            get {
                return ResourceManager.GetString("EnsureLocalDisposal_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local disposable object &apos;{0}&apos; is not disposed.
        /// </summary>
        internal static string EnsureLocalDisposal_Message {
            get {
                return ResourceManager.GetString("EnsureLocalDisposal_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure local disposal.
        /// </summary>
        internal static string EnsureLocalDisposal_Title {
            get {
                return ResourceManager.GetString("EnsureLocalDisposal_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equals(object) methods should return false when the object parameter is null..
        /// </summary>
        internal static string EqualsShouldHandleNullArg_Description {
            get {
                return ResourceManager.GetString("EqualsShouldHandleNullArg_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equals method does not handle null argument.
        /// </summary>
        internal static string EqualsShouldHandleNullArg_Message {
            get {
                return ResourceManager.GetString("EqualsShouldHandleNullArg_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equals method should handle null argument.
        /// </summary>
        internal static string EqualsShouldHandleNullArg_Title {
            get {
                return ResourceManager.GetString("EqualsShouldHandleNullArg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks that a finalizer calls the base class finalizer..
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizer_Description {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finalizer does not call the base class finalizer.
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizer_Message {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finalizers should call base class finalizer.
        /// </summary>
        internal static string FinalizersShouldCallBaseClassFinalizer_Title {
            get {
                return ResourceManager.GetString("FinalizersShouldCallBaseClassFinalizer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calls to Assembly.GetEntryAssembly() may return null in libraries or DLLs. Ensure proper null handling..
        /// </summary>
        internal static string GetEntryAssemblyMayReturnNull_Description {
            get {
                return ResourceManager.GetString("GetEntryAssemblyMayReturnNull_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly.GetEntryAssembly may return null when called from a library or DLL.
        /// </summary>
        internal static string GetEntryAssemblyMayReturnNull_Message {
            get {
                return ResourceManager.GetString("GetEntryAssemblyMayReturnNull_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly.GetEntryAssembly may return null.
        /// </summary>
        internal static string GetEntryAssemblyMayReturnNull_Title {
            get {
                return ResourceManager.GetString("GetEntryAssemblyMayReturnNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for methods that do not require anything from the current instance and can be converted into static methods..
        /// </summary>
        internal static string MethodCanBeMadeStatic_Description {
            get {
                return ResourceManager.GetString("MethodCanBeMadeStatic_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; can be made static.
        /// </summary>
        internal static string MethodCanBeMadeStatic_Message {
            get {
                return ResourceManager.GetString("MethodCanBeMadeStatic_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method can be made static.
        /// </summary>
        internal static string MethodCanBeMadeStatic_Title {
            get {
                return ResourceManager.GetString("MethodCanBeMadeStatic_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public static fields should be constant or readonly to avoid synchronization issues..
        /// </summary>
        internal static string NonConstantStaticFieldsShouldNotBeVisible_Description {
            get {
                return ResourceManager.GetString("NonConstantStaticFieldsShouldNotBeVisible_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The static field &apos;{0}&apos; should not be publicly visible.
        /// </summary>
        internal static string NonConstantStaticFieldsShouldNotBeVisible_Message {
            get {
                return ResourceManager.GetString("NonConstantStaticFieldsShouldNotBeVisible_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-constant static fields should not be visible.
        /// </summary>
        internal static string NonConstantStaticFieldsShouldNotBeVisible_Title {
            get {
                return ResourceManager.GetString("NonConstantStaticFieldsShouldNotBeVisible_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Obsolete attribute is more helpful if it includes advice on how to deal with the situation (e.g., the new recommended API to use)..
        /// </summary>
        internal static string ObsoleteMessagesShouldNotBeEmpty_Description {
            get {
                return ResourceManager.GetString("ObsoleteMessagesShouldNotBeEmpty_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Obsolete attribute on &apos;{0}&apos; should include a message providing guidance..
        /// </summary>
        internal static string ObsoleteMessagesShouldNotBeEmpty_Message {
            get {
                return ResourceManager.GetString("ObsoleteMessagesShouldNotBeEmpty_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obsolete attribute should not be empty.
        /// </summary>
        internal static string ObsoleteMessagesShouldNotBeEmpty_Title {
            get {
                return ResourceManager.GetString("ObsoleteMessagesShouldNotBeEmpty_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods named Dispose should be reserved for types that implement IDisposable to avoid confusing developers..
        /// </summary>
        internal static string OnlyUseDisposeForIDisposableTypes_Description {
            get {
                return ResourceManager.GetString("OnlyUseDisposeForIDisposableTypes_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method &apos;{0}&apos; is named Dispose but the containing type does not implement IDisposable.
        /// </summary>
        internal static string OnlyUseDisposeForIDisposableTypes_Message {
            get {
                return ResourceManager.GetString("OnlyUseDisposeForIDisposableTypes_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods named Dispose should be reserved for types that implement IDisposable.
        /// </summary>
        internal static string OnlyUseDisposeForIDisposableTypes_Title {
            get {
                return ResourceManager.GetString("OnlyUseDisposeForIDisposableTypes_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods and properties which return a string, an array, a collection, or an enumerable should return an empty instance rather than null..
        /// </summary>
        internal static string PreferEmptyInstanceOverNull_Description {
            get {
                return ResourceManager.GetString("PreferEmptyInstanceOverNull_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method or property &apos;{0}&apos; returns null; consider returning an empty instance instead.
        /// </summary>
        internal static string PreferEmptyInstanceOverNull_Message {
            get {
                return ResourceManager.GetString("PreferEmptyInstanceOverNull_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer returning an empty instance over null.
        /// </summary>
        internal static string PreferEmptyInstanceOverNull_Title {
            get {
                return ResourceManager.GetString("PreferEmptyInstanceOverNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is recommended to use SafeHandle instead of IntPtr or UIntPtr for handling unmanaged resources..
        /// </summary>
        internal static string PreferSafeHandle_Description {
            get {
                return ResourceManager.GetString("PreferSafeHandle_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Consider using SafeHandle instead of {0} for better resource management and safety.
        /// </summary>
        internal static string PreferSafeHandle_Message {
            get {
                return ResourceManager.GetString("PreferSafeHandle_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prefer SafeHandle over IntPtr or UIntPtr for unmanaged resources.
        /// </summary>
        internal static string PreferSafeHandle_Title {
            get {
                return ResourceManager.GetString("PreferSafeHandle_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event delegates should be checked for null and copied to a local variable to avoid race conditions..
        /// </summary>
        internal static string ProtectCallToEventDelegatesAnalyzer_Description {
            get {
                return ResourceManager.GetString("ProtectCallToEventDelegatesAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event &apos;{0}&apos; should be checked for null before invocation.
        /// </summary>
        internal static string ProtectCallToEventDelegatesAnalyzer_Message {
            get {
                return ResourceManager.GetString("ProtectCallToEventDelegatesAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protect call to event delegates.
        /// </summary>
        internal static string ProtectCallToEventDelegatesAnalyzer_Title {
            get {
                return ResourceManager.GetString("ProtectCallToEventDelegatesAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks that the format string used with String.Format matches the other parameters used with the method..
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethods_Description {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethods_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format string in &apos;{0}&apos; does not match the arguments provided.
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethods_Message {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethods_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide correct arguments to formatting methods.
        /// </summary>
        internal static string ProvideCorrectArgumentsToFormattingMethods_Title {
            get {
                return ResourceManager.GetString("ProvideCorrectArgumentsToFormattingMethods_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule verifies that valid regular expression strings are used as arguments..
        /// </summary>
        internal static string ProvideCorrectRegexPattern_Description {
            get {
                return ResourceManager.GetString("ProvideCorrectRegexPattern_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid regex pattern in &apos;{0}&apos;.
        /// </summary>
        internal static string ProvideCorrectRegexPattern_Message {
            get {
                return ResourceManager.GetString("ProvideCorrectRegexPattern_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide correct regex pattern.
        /// </summary>
        internal static string ProvideCorrectRegexPattern_Title {
            get {
                return ResourceManager.GetString("ProvideCorrectRegexPattern_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule verifies that valid XML string arguments are passed as arguments..
        /// </summary>
        internal static string ProvideValidXmlString_Description {
            get {
                return ResourceManager.GetString("ProvideValidXmlString_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid XML string in &apos;{0}&apos;.
        /// </summary>
        internal static string ProvideValidXmlString_Message {
            get {
                return ResourceManager.GetString("ProvideValidXmlString_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide valid XML string.
        /// </summary>
        internal static string ProvideValidXmlString_Title {
            get {
                return ResourceManager.GetString("ProvideValidXmlString_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule verifies that valid XPath expression strings are passed as arguments..
        /// </summary>
        internal static string ProvideValidXPathExpression_Description {
            get {
                return ResourceManager.GetString("ProvideValidXPathExpression_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid XPath expression in &apos;{0}&apos;.
        /// </summary>
        internal static string ProvideValidXPathExpression_Message {
            get {
                return ResourceManager.GetString("ProvideValidXPathExpression_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide valid XPath expression.
        /// </summary>
        internal static string ProvideValidXPathExpression_Title {
            get {
                return ResourceManager.GetString("ProvideValidXPathExpression_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;(x % 2) == 1&apos; to check for odd numbers will fail for negative numbers. Use &apos;(x % 2 != 0)&apos; or &apos;(x &amp; 1 == 1)&apos; instead..
        /// </summary>
        internal static string ReplaceIncompleteOddnessCheck_Description {
            get {
                return ResourceManager.GetString("ReplaceIncompleteOddnessCheck_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modulo operation used to check oddness may fail for negative numbers; consider using &apos;(x % 2 != 0)&apos; or &apos;(x &amp; 1 == 1)&apos;.
        /// </summary>
        internal static string ReplaceIncompleteOddnessCheck_Message {
            get {
                return ResourceManager.GetString("ReplaceIncompleteOddnessCheck_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace incomplete oddness check.
        /// </summary>
        internal static string ReplaceIncompleteOddnessCheck_Title {
            get {
                return ResourceManager.GetString("ReplaceIncompleteOddnessCheck_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for integral divisions where the result is cast to a floating point type..
        /// </summary>
        internal static string ReviewCastOnIntegerDivision_Description {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerDivision_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cast on integer division may cause truncation.
        /// </summary>
        internal static string ReviewCastOnIntegerDivision_Message {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerDivision_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review cast on integer division.
        /// </summary>
        internal static string ReviewCastOnIntegerDivision_Title {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerDivision_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for integral multiply operations where the result is cast to a larger integral type..
        /// </summary>
        internal static string ReviewCastOnIntegerMultiplication_Description {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerMultiplication_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cast on integer multiplication may cause overflow.
        /// </summary>
        internal static string ReviewCastOnIntegerMultiplication_Message {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerMultiplication_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review cast on integer multiplication.
        /// </summary>
        internal static string ReviewCastOnIntegerMultiplication_Title {
            get {
                return ResourceManager.GetString("ReviewCastOnIntegerMultiplication_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for variables or fields that are assigned multiple times using the same value..
        /// </summary>
        internal static string ReviewDoubleAssignment_Description {
            get {
                return ResourceManager.GetString("ReviewDoubleAssignment_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; is assigned twice with the same value.
        /// </summary>
        internal static string ReviewDoubleAssignment_Message {
            get {
                return ResourceManager.GetString("ReviewDoubleAssignment_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review double assignment.
        /// </summary>
        internal static string ReviewDoubleAssignment_Title {
            get {
                return ResourceManager.GetString("ReviewDoubleAssignment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks to see if a type manages its identity in a consistent way..
        /// </summary>
        internal static string ReviewInconsistentIdentity_Description {
            get {
                return ResourceManager.GetString("ReviewInconsistentIdentity_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identity management for &apos;{0}&apos; is inconsistent.
        /// </summary>
        internal static string ReviewInconsistentIdentity_Message {
            get {
                return ResourceManager.GetString("ReviewInconsistentIdentity_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review inconsistent identity management.
        /// </summary>
        internal static string ReviewInconsistentIdentity_Title {
            get {
                return ResourceManager.GetString("ReviewInconsistentIdentity_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locks should be used only for operations on variables. Consider using Interlocked for atomic operations..
        /// </summary>
        internal static string ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Description {
            get {
                return ResourceManager.GetString("ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lock on &apos;{0}&apos; should be reviewed to ensure it is necessary.
        /// </summary>
        internal static string ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Message {
            get {
                return ResourceManager.GetString("ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review lock used only for operations on variables.
        /// </summary>
        internal static string ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Title {
            get {
                return ResourceManager.GetString("ReviewLockUsedOnlyForOperationsOnVariablesAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for variables or fields that are assigned to themselves..
        /// </summary>
        internal static string ReviewSelfAssignment_Description {
            get {
                return ResourceManager.GetString("ReviewSelfAssignment_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; is assigned to itself.
        /// </summary>
        internal static string ReviewSelfAssignment_Message {
            get {
                return ResourceManager.GetString("ReviewSelfAssignment_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review self-assignment.
        /// </summary>
        internal static string ReviewSelfAssignment_Title {
            get {
                return ResourceManager.GetString("ReviewSelfAssignment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for empty blocks that produce useless control flow inside IL..
        /// </summary>
        internal static string ReviewUselessControlFlow_Description {
            get {
                return ResourceManager.GetString("ReviewUselessControlFlow_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Useless control flow detected.
        /// </summary>
        internal static string ReviewUselessControlFlow_Message {
            get {
                return ResourceManager.GetString("ReviewUselessControlFlow_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review useless control flow.
        /// </summary>
        internal static string ReviewUselessControlFlow_Title {
            get {
                return ResourceManager.GetString("ReviewUselessControlFlow_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for invalid integer to double conversion using BitConverter.Int64BitsToDouble method..
        /// </summary>
        internal static string ReviewUseOfInt64BitsToDouble_Description {
            get {
                return ResourceManager.GetString("ReviewUseOfInt64BitsToDouble_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid use of BitConverter.Int64BitsToDouble.
        /// </summary>
        internal static string ReviewUseOfInt64BitsToDouble_Message {
            get {
                return ResourceManager.GetString("ReviewUseOfInt64BitsToDouble_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review use of Int64BitsToDouble.
        /// </summary>
        internal static string ReviewUseOfInt64BitsToDouble_Title {
            get {
                return ResourceManager.GetString("ReviewUseOfInt64BitsToDouble_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule checks for a modulo one operation on an integral type..
        /// </summary>
        internal static string ReviewUseOfModuloOneOnIntegers_Description {
            get {
                return ResourceManager.GetString("ReviewUseOfModuloOneOnIntegers_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modulo one operation on an integer is likely a typo.
        /// </summary>
        internal static string ReviewUseOfModuloOneOnIntegers_Message {
            get {
                return ResourceManager.GetString("ReviewUseOfModuloOneOnIntegers_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Review use of modulo one on integers.
        /// </summary>
        internal static string ReviewUseOfModuloOneOnIntegers_Title {
            get {
                return ResourceManager.GetString("ReviewUseOfModuloOneOnIntegers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overridden ToString() methods should not return null. An appropriately descriptive string, or string.Empty, should be returned instead to make the value more useful..
        /// </summary>
        internal static string ToStringShouldNotReturnNull_Description {
            get {
                return ResourceManager.GetString("ToStringShouldNotReturnNull_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ToString() method returns null; consider returning a descriptive string or string.Empty.
        /// </summary>
        internal static string ToStringShouldNotReturnNull_Message {
            get {
                return ResourceManager.GetString("ToStringShouldNotReturnNull_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ToString() should not return null.
        /// </summary>
        internal static string ToStringShouldNotReturnNull_Title {
            get {
                return ResourceManager.GetString("ToStringShouldNotReturnNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use value in property setter.
        /// </summary>
        internal static string UseValueInPropertySetter_Description {
            get {
                return ResourceManager.GetString("UseValueInPropertySetter_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property setter does not use &apos;value&apos;.
        /// </summary>
        internal static string UseValueInPropertySetter_Message {
            get {
                return ResourceManager.GetString("UseValueInPropertySetter_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This rule ensures all setter properties uses the value argument passed to the property..
        /// </summary>
        internal static string UseValueInPropertySetter_Title {
            get {
                return ResourceManager.GetString("UseValueInPropertySetter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing to static fields from instance methods can cause issues in multithreaded environments. Consider refactoring to avoid this pattern..
        /// </summary>
        internal static string WriteStaticFieldFromInstanceMethod_Description {
            get {
                return ResourceManager.GetString("WriteStaticFieldFromInstanceMethod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The instance method &apos;{0}&apos; writes to static field &apos;{1}&apos;, which can cause issues in multithreaded environments.
        /// </summary>
        internal static string WriteStaticFieldFromInstanceMethod_Message {
            get {
                return ResourceManager.GetString("WriteStaticFieldFromInstanceMethod_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not write to static fields from instance methods.
        /// </summary>
        internal static string WriteStaticFieldFromInstanceMethod_Title {
            get {
                return ResourceManager.GetString("WriteStaticFieldFromInstanceMethod_Title", resourceCulture);
            }
        }
    }
}
